// DO NOT EDIT MANUALLY!
// Generated by org/jetbrains/kotlin/generators/arguments/GenerateGradleOptions.kt
// To regenerate run 'generateGradleOptions' task
@file:Suppress("RemoveRedundantQualifierName", "Deprecation", "DuplicatedCode")

package org.jetbrains.kotlin.gradle.dsl

open class CompilerJsOptionsDsl (
    private val optionsAccessor: ((org.jetbrains.kotlin.gradle.dsl.CompilerJsOptions) -> Unit) -> Unit
)  : org.jetbrains.kotlin.gradle.dsl.CompilerCommonOptionsDsl(optionsAccessor) {

    /**
     * Disable internal declaration export
     * Default value: false
     */
    fun friendModulesDisabled(value: kotlin.Boolean) {
        optionsAccessor { it.friendModulesDisabled.set(value) }
    }

    /**
     * Define whether the `main` function should be called upon execution
     * Possible values: "call", "noCall"
     * Default value: org.jetbrains.kotlin.gradle.dsl.JsMainFunctionExecutionMode.CALL
     */
    fun main(value: org.jetbrains.kotlin.gradle.dsl.JsMainFunctionExecutionMode) {
        optionsAccessor { it.main.set(value) }
    }

    /**
     * Generate .meta.js and .kjsm files with metadata. Use to create a library
     * Default value: true
     */
    fun metaInfo(value: kotlin.Boolean) {
        optionsAccessor { it.metaInfo.set(value) }
    }

    /**
     * Kind of the JS module generated by the compiler
     * Possible values: "plain", "amd", "commonjs", "umd"
     * Default value: org.jetbrains.kotlin.gradle.dsl.JsModuleKind.MODULE_PLAIN
     */
    fun moduleKind(value: org.jetbrains.kotlin.gradle.dsl.JsModuleKind) {
        optionsAccessor { it.moduleKind.set(value) }
    }

    /**
     * Don't automatically include the default Kotlin/JS stdlib into compilation dependencies
     * Default value: true
     */
    fun noStdlib(value: kotlin.Boolean) {
        optionsAccessor { it.noStdlib.set(value) }
    }

    /**
     * Destination *.js file for the compilation result
     * Default value: null
     */
    @Deprecated(message = "Use task 'outputFileProperty' to specify location", level = DeprecationLevel.WARNING)
    fun outputFile(value: kotlin.String?) {
        optionsAccessor { it.outputFile.set(value) }
    }

    /**
     * Generate source map
     * Default value: false
     */
    fun sourceMap(value: kotlin.Boolean) {
        optionsAccessor { it.sourceMap.set(value) }
    }

    /**
     * Embed source files into source map
     * Possible values: "never", "always", "inlining"
     * Default value: null
     */
    fun sourceMapEmbedSources(value: org.jetbrains.kotlin.gradle.dsl.JsSourceMapEmbedMode?) {
        optionsAccessor { it.sourceMapEmbedSources.set(value) }
    }

    /**
     * Add the specified prefix to paths in the source map
     * Default value: null
     */
    fun sourceMapPrefix(value: kotlin.String?) {
        optionsAccessor { it.sourceMapPrefix.set(value) }
    }

    /**
     * Generate JS files for specific ECMA version
     * Possible values: "v5"
     * Default value: "v5"
     */
    fun target(value: kotlin.String) {
        optionsAccessor { it.target.set(value) }
    }

    /**
     * Translate primitive arrays to JS typed arrays
     * Default value: true
     */
    fun typedArrays(value: kotlin.Boolean) {
        optionsAccessor { it.typedArrays.set(value) }
    }
}
